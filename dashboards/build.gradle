plugins {
    id 'docker-compose'
    id 'java'
    id 'distribution'
}

version "1.0"

def dashboardSourceLocation = "$buildDir/dashboards"
def dashboardOutput = "$dashboardSourceLocation/com/thelastpickle/dashboards"

task startDependencies(type:Exec) {
    group = "dashboard"
    description = "Start Cassandra and wait for it to be up"

    environment  "DASHBOARD_DIR", dashboardOutput
    environment "BUILD_DIR", dashboardOutput

    commandLine "docker-compose", "run", "start_dependencies"
}

task preview(type:Exec) {
    group = "dashboard"
    description = "Start the dashboard dev environment"
    commandLine "docker-compose",  "up"
    
    environment "DASHBOARD_DIR", dashboardOutput
    environment "BUILD_DIR", dashboardOutput

    dependsOn startDependencies
}

task stopPreview(type:Exec) {
    group = "dashboard"
    description = "Stops the docker compose environment"

    environment "DASHBOARD_DIR", dashboardOutput
    environment "BUILD_DIR", dashboardOutput

    commandLine  "docker-compose", "stop"
}

task generateDashboards(type: Exec) {
    commandLine "docker-compose", "up", "--exit-code-from", "grafonnet", "grafonnet"

    dependsOn(":docker-grafonnet:buildDocker")

    standardOutput = new ByteArrayOutputStream()
    errorOutput = new ByteArrayOutputStream()
    group = "dashboard"
    description = "Regenerate the Grafana Dashboards using Docker."

    inputs.files(project.fileTree(dir: "dashboards"))

    outputs.dir(dashboardOutput)
            .withPropertyName("dashboards")

    environment "BUILD_DIR", dashboardOutput
    environment "DASHBOARD_DIR", dashboardOutput

    ignoreExitValue true
    doLast {
        logger.info(standardOutput.toString())
        logger.error(errorOutput.toString())
//        if (executionResult.getExitValue() != 0) {
//            print(standardOutput)
//            throw new GradleScriptException("non zero exit code")
//        }
    }
}

sourceSets {
    main {
        output.dir(dashboardSourceLocation , builtBy: 'generateDashboards')
    }
}

distributions {
    main {
        distributionBaseName = "tlp-dashboards"

        contents {
            from dashboardOutput
        }
    }
}

