
buildscript {
    ext.kotlin_version = "1.9.0"
    ext.jcommander_version = '1.82'
    ext.docker_compose_version = "0.16.6"

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.avast.gradle:gradle-docker-compose-plugin:$docker_compose_version"
    }
}

plugins {
    id "com.bmuschko.docker-remote-api" version "9.4.0"
    id "org.jetbrains.kotlin.jvm" version "1.9.0"
    id "idea"
    id "java"
    id "application"
    id "com.github.johnrengelman.shadow"  version "8.1.1"
    //id "com.netflix.nebula.ospackage"  version "11.6.0"
}

group 'com.rustyrazorblade'

java {
    sourceCompatibility = JavaVersion.VERSION_11
}

ext {
    log4j_api_version = "1.2.0"
    log4j_core_version = "2.20.0"
    slf4j_version = "2.11.2"
    jackson_dataformat_version = "2.15.2"
    jackson_kotlin_version = "2.9.+"
    jupiter_version = '5.5.2'
    assertj_version = '3.11.1'
}


application {
    applicationName = "easy-cass-lab"
    mainClass.set(" com.rustyrazorblade.easycasslab.MainKt")

    applicationDefaultJvmArgs= ["-Deasycasslab.ami.name=rustyrazorblade/images/easy-cass-lab-cassandra-aarch64-$version",
                                "-Deasycasslab.ami.owner=081145431955",
                                "-Deasycasslab.version=$version"]
}

// In this section you declare where to find the dependencies of your project
allprojects {
    repositories {
        mavenCentral()
    }
}


// In this section you declare the dependencies for your production and test code
dependencies {

    implementation "org.apache.logging.log4j:log4j-api-kotlin:$log4j_api_version"
    implementation "org.apache.logging.log4j:log4j-core:$log4j_core_version"
    implementation group: "org.apache.logging.log4j", name: "log4j-slf4j18-impl", version: slf4j_version

    // https://mvnrepository.com/artifact/org.jetbrains.kotlin/kotlin-stdlib
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlin_version

    implementation group: 'com.beust', name: 'jcommander', version: jcommander_version
    implementation 'com.google.guava:guava:30.0-jre'

    // for finding resources
    // https://mvnrepository.com/artifact/org.reflections/reflections
    implementation group: 'org.reflections', name: 'reflections', version: '0.9.11'

    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementation group: 'commons-io', name: 'commons-io', version: '2.7'

    // https://mvnrepository.com/artifact/com.github.docker-java/docker-java
    implementation group: 'com.github.docker-java', name: 'docker-java', version: '3.3.4'
    // https://mvnrepository.com/artifact/com.github.docker-java/docker-java-transport-httpclient5
    implementation 'com.github.docker-java:docker-java-transport-httpclient5:3.3.4'

    implementation project(':core')

    implementation group: 'software.amazon.awssdk', name: 'ec2', version: '2.20.145'

    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: jackson_dataformat_version
    implementation group: 'com.fasterxml.jackson.module', name:'jackson-module-kotlin', version: jackson_kotlin_version

    // https://mvnrepository.com/artifact/org.apache.sshd/sshd-core
    implementation 'org.apache.sshd:sshd-core:2.12.1'
    implementation group: 'org.apache.sshd', name: 'sshd-scp', version: '2.12.1'


    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: jupiter_version

    // https://mvnrepository.com/artifact/org.assertj/assertj-core
    testImplementation group: 'org.assertj', name: 'assertj-core', version: assertj_version

    implementation 'com.github.ajalt:mordant:1.2.1'

    testImplementation "io.mockk:mockk:1.9.3"
}


kotlin {
    jvmToolchain(11)
}

compileKotlin {
    kotlinOptions.freeCompilerArgs = ["-Xallow-result-return-type"]


}
compileTestKotlin {
    kotlinOptions.freeCompilerArgs = ["-Xallow-result-return-type"]
}


sourceSets {
    main.java.srcDirs += "src/main/kotlin"
    test.java.srcDirs += "src/test/kotlin"
    main.resources.srcDirs += "build/aws"
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/kotlin')
        }
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

tasks.register('integrationTest', Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    description = "Runs the full end to end tests.  Will create a cluster in AWS.  Errors might require manual cluster tear down."
    group = "Verification"
}

test {
    useJUnitPlatform()
//    reports {
//        junitXml.enabled = true
//        html.enabled = true
//    }
    testLogging.showStandardStreams = true
}

task buildAll {
    group = "Publish"
//    dependsOn "buildDeb"
//    dependsOn "buildRpm"
    dependsOn "distTar"
}

task packer(type: Exec) {
    group "Build"
    workingDir "packer"
    commandLine "packer", "build", "base.pkr.hcl"
    commandLine "packer", "build", "cassandra.pkr.hcl"
}

distributions {
    main {
        // Include the "packer" directory in the distribution
        contents {
            from('packer') {
                into 'packer'
            }
        }
    }
}

distTar {
    compression = Compression.GZIP
    archiveExtension = "tar.gz"
}

assemble.mustRunAfter clean

